volumes:
  app_data_postgres:
    name: ${VOLUME}/postgres
  app_data_postgres_log:
    name: ${VOLUME}/postgres_log

networks:
  app_network:
    driver: bridge

services:
  api:
    build:
      context: .
      dockerfile: ./infra/go/Dockerfile
    ports:
      - "9090:9090"
    volumes:
      - .:/app
      - ./tmp:/app/tmp
    environment:
      - AIR_ROOT=/app
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - GOOSE_DRIVER=${GOOSE_DRIVER}
      - GOOSE_DBSTRING=${GOOSE_DBSTRING}
      - GOOSE_MIGRATION_DIR=${GOOSE_MIGRATION_DIR}
      - GOOSE_TABLE=${GOOSE_TABLE}
    networks:
      - app_network
    depends_on:
      - postgres

  postgres:
    build:
      context: .
      dockerfile: ./infra/db/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - ${VOLUME}/postgres:/var/lib/postgresql/data
      - ${VOLUME}/postgres_log:/var/log/postgresql
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE} || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
